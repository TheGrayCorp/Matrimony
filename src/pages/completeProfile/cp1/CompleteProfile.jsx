import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import Stepper from "../../../components/ui/stepper/Stepper";
import Step1Form from "./Step1Form";
import Step2Form from "../cp2/Step2Form";
import CompleteProfile3 from "../cp3/CompleteProfile3";
import GenerateChartForm from "../cp2/GenerateChartForm";
import AutoGeneratedChart from "../cp2/AutoGenerateChart";
import ManualEntryForm from "../cp2/ManualEntryForm";
import ManualChartEditor from "../cp2/manualchart/ManualChartEditor";
import { useUIState } from "../../../context/UIStateContext";
import {
  saveUserData,
  updateUserData,
  generateChartData,
} from "../../../services/completeProfileApi/completeProfileApi";
import { docId } from "../../../data/Data";
import { useUserProfile } from "../../../hooks/swr/useUserProfile";
import Spinner from "../../../components/ui/spinner/spinner";
import { RASI_BOX_MAP } from "../../../rasiStarData/RasiStarData";

const CompleteProfile = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const currentStep = parseInt(searchParams.get("step")) || 1;
  const step2View = searchParams.get("view") || "choice";
  const totalSteps = 3;
  const [editorKey, setEditorKey] = useState(0);
  const { setLoading, setApiError } = useUIState();
  const { profile, isLoading, isValidating, isError, mutate } =
    useUserProfile(docId);
  const [currentChartType, setCurrentChartType] = useState("rasi");
  const [rasiChartData, setRasiChartData] = useState(null);
  const navigate = useNavigate();
  const [autoGeneratedChart, setAutoGeneratedChart] = useState(null);

  useEffect(() => {
    if (currentStep !== 2) {
      setCurrentChartType("rasi");
      setRasiChartData(null);
    }
  }, [currentStep]);

  useEffect(() => {
    if (currentStep === 2 && step2View === "manualform") {
      mutate();
    }
  }, [currentStep, step2View, mutate]);

  const goTo = (params) => {
    setSearchParams(params);
  };

  const handleStep1Submit = async (data) => {
    setLoading(true);
    setApiError(null);

    const payload = {
      docId: docId,
      personalDetails: {
        first_name: data.firstName,
        last_name: data.lastName,
        full_name: `${data.firstName} ${data.lastName}`,
        gender: data.gender,
      },
    };
    try {
      const response = await saveUserData(payload);
      console.log("Step 1 data:", response);
      goTo({ step: "2", view: "choice" });
    } catch (error) {
      console.error("API Error:", error);
      setApiError("Failed to save profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleStep2ChoiceSubmit = (selection) => {
    console.log("Step 2 Choice:", selection);
    if (selection.inputMethod === "manual") {
      goTo({ step: "2", view: "manualform" });
    } else if (selection.inputMethod === "generate") {
      goTo({ step: "2", view: "generate" });
    }
  };

  const handleGenerateFormSubmit = async (data) => {
    console.log("Generate Chart Form Raw Data:", data);
    setLoading(true);
    setApiError(null);

    try {
      const [year, month, day] = data.dateOfBirth.split("-").map(Number);
      const [hour, min] = data.timeOfBirth.split(":").map(Number);
      const payload = {
        day,
        month,
        year,
        hour,
        min,
        lat: parseFloat(data.placeOfBirth.latitude),
        lon: parseFloat(data.placeOfBirth.longitude),
        birth_location: data.placeOfBirth.value,
      };
      console.log("Payload being sent to chart API:", payload);
      const response = await generateChartData(docId, payload);
      console.log("Chart API Response:", response.data);
      setAutoGeneratedChart(response.data);
      goTo({ step: "2", view: "showChart" });
    } catch (error) {
      console.error("API Error generating chart:", error);
      setApiError(
        "Failed to generate your astrology chart. Please check the details and try again."
      );
    } finally {
      setLoading(false);
    }
  };

  const handleChartConfirm = async (submittedChartData) => {
    if (currentChartType === "rasi") {
      console.log("Rasi Chart data received:", submittedChartData);
      setRasiChartData(submittedChartData);
      setCurrentChartType("navamsa");
      setEditorKey((prevKey) => prevKey + 1);
      return;
    }
    if (currentChartType === "navamsa") {
      console.log("Navamsa Chart data received:", submittedChartData);
      setLoading(true);
      setApiError(null);

      try {
        const rasiChartPayload = {};
        for (let i = 0; i < 12; i++) {
          const key = `place${i + 1}`;
          const planetsInBox = rasiChartData.placements[i];
          rasiChartPayload[key] = planetsInBox
            ? planetsInBox.map((p) => p.name)
            : [];
        }
        const rasiLagnaIndex = rasiChartData.lagnas.indexOf("01");
        const rasiLagnaName =
          rasiLagnaIndex !== -1 ? RASI_BOX_MAP[rasiLagnaIndex] : null;

        const navamsaChartPayload = {};
        for (let i = 0; i < 12; i++) {
          const key = `place${i + 1}`;
          const planetsInBox = submittedChartData.placements[i];
          navamsaChartPayload[key] = planetsInBox
            ? planetsInBox.map((p) => p.name)
            : [];
        }
        const navamsaLagnaIndex = submittedChartData.lagnas.indexOf("01");
        const navamsaLagnaName =
          navamsaLagnaIndex !== -1 ? RASI_BOX_MAP[navamsaLagnaIndex] : null;

        const payload = {
          docId: docId,
          astrology: {
            rasi_chart: rasiChartPayload,
            rasi_lagna: rasiLagnaName,
            navamsa_chart: navamsaChartPayload,
            navamsa_lagna: navamsaLagnaName,
          },
        };
        console.log("Final Combined Payload to be sent:", payload);
        const response = await updateUserData(payload);
        console.log("Both charts updated successfully!", response);
        goTo({ step: "3" });
      } catch (error) {
        console.error("API Error updating charts:", error);
        setApiError("Failed to save your charts. Please try again.");
      } finally {
        setLoading(false);
      }
    }
  };

  const handleChartEdit = () => {
    console.log("Editing Chart Details - Resetting planets...");
    setEditorKey((prevKey) => prevKey + 1);
  };

  const handleManualEntryFormSubmit = async (data) => {
    setLoading(true);
    setApiError(null);
    const formattedTime = `${data.timeOfBirth}:00`;

    const payload = {
      docId: docId,
      astrology: {
        rasi: data.rasi.value,
        natchathiram: data.natchathiram.value,
        dob: data.dateOfBirth,
        dot: formattedTime,
        birth_location: data.placeOfBirth.value,
      },
    };
    try {
      if (profile && profile.astrology) {
        await updateUserData(payload);
      } else {
        console.log("Saving new astrology data...");
        await saveUserData(payload);
      }
      goTo({ step: "2", view: "numberedChart" });
    } catch (error) {
      console.error("API Error:", error);
      setApiError("Failed to save profile. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleStep3Submit = async (data) => {
    console.log("Final Profile Data from form:", data);
    setLoading(true);
    setApiError(null);

    const payload = {
      docId: docId,
      personalDetails: {
        marital_status: data.maritalStatus.value,
        height: parseInt(data.height, 10),
        religion: data.religion,
        nationality: data.nationality,
        bio: data.bio,
      },
      careerStudies: {
        occupation: data.occupation,
        occupation_type: data.occupationType.value,
        higher_studies: data.education,
      },
    };
    console.log("Final Payload to be sent:", payload);

    try {
      const response = await saveUserData(payload);
      console.log("Profile updated successfully!", response.data);
      console.log("User should be navigated to their main profile page now.");
      navigate("/home");
    } catch (error) {
      console.error("API Error updating final profile:", error);
      const errorMessage =
        error.response?.data?.message ||
        "Failed to save your profile. Please try again.";
      setApiError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const renderStepHeader = () => {
    switch (currentStep) {
      case 1:
        return (
          <div>
            <p className="text-middleGray font-medium">Enter the details</p>
            <p className="font-bold text-purple text-lg">
              to complete your profile
            </p>
          </div>
        );
      case 2:
        if (step2View === "generate") {
          return (
            <div>
              <p className="text-middleGray font-medium">Enter birth details</p>
              <p className="font-bold text-purple text-lg">
                to calculate Astrology chart
              </p>
            </div>
          );
        } else if (step2View === "showChart") {
          return (
            <div>
              <p className="font-bold text-purple">
                This is your Rasi, Navamsa chart
              </p>
              <p className="text-sm text-middleGray">
                If any changes, you can edit. Otherwise confirm it.
              </p>
            </div>
          );
        } else if (
          step2View === "manualform" ||
          step2View === "numberedChart"
        ) {
          return (
            <div>
              <p className="text-middleGray font-medium">Enter birth details</p>
              <p className="font-bold text-purple text-lg">
                to calculate Astrology chart
              </p>
            </div>
          );
        } else {
          return (
            <div>
              <p className="text-middleGray font-medium">Choose preferred</p>
              <p className="font-bold text-purple text-lg">
                Astrology chart input method
              </p>
              <p className="text-middleGray text-sm">
                You can generate astrology chart with required birth details or
                you can enter manually
              </p>
            </div>
          );
        }
      case 3:
        return (
          <div>
            <p className="text-middleGray">Enter the personal details</p>
            <p className="font-bold text-purple text-lg">
              to complete your profile
            </p>
          </div>
        );
      default:
        return null;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return <Step1Form onSubmit={handleStep1Submit} />;
      case 2:
        switch (step2View) {
          case "generate":
            return <GenerateChartForm onSubmit={handleGenerateFormSubmit} />;
          case "showChart":
            return (
              <AutoGeneratedChart
                chartData={autoGeneratedChart}
                onConfirm={handleChartConfirm}
                onEdit={() => goTo({ step: "2", view: "generate" })}
              />
            );
          case "manualform":
            if (isValidating) {
              return <Spinner />;
            } else if (isError) {
              return <p className="text-red-500">Something went wrong</p>;
            }
            return (
              <ManualEntryForm
                onSubmit={handleManualEntryFormSubmit}
                existingData={profile?.astrology}
              />
            );
          case "numberedChart":
            return (
              <ManualChartEditor
                key={editorKey}
                title={currentChartType === "rasi" ? "Rasi" : "Navamsa"}
                onConfirm={handleChartConfirm}
                onEdit={handleChartEdit}
              />
            );
          case "choice":
          default:
            return <Step2Form onSubmit={handleStep2ChoiceSubmit} />;
        }
      case 3:
        return <CompleteProfile3 onSubmit={handleStep3Submit} />;
      default:
        return <Step1Form onSubmit={handleStep1Submit} />;
    }
  };

  return (
    <div className="flex flex-col">
      <div className="flex-grow">
        <div className="px-6">
          <div className="pt-14 pb-8 text-center">{renderStepHeader()}</div>
          <div className="w-full mb-6">
            <Stepper currentStep={currentStep} totalSteps={totalSteps} />
          </div>
          <div>{renderStepContent()}</div>
        </div>
      </div>
    </div>
  );
};

export default CompleteProfile;
