import { useSearchParams } from "react-router-dom";
import Stepper from "../../../components/ui/stepper/Stepper";
import Step1Form from "./Step1Form";
import Step2Form from "../cp2/Step2Form";
import Step3Form from "../cp3/CompleteProfile3";
import Profile from "../../../components/ui/Profile";
import { user } from "../../../mockData/mockData";
import Header from "../../../components/ui/headerLayout/Header";
import FooterText from "../../../components/ui/footerText/FooterText";
import GenerateChartForm from "../cp2/GenerateChartForm";
import AutoGeneratedChart from "../cp2/AutoGenerateChart";
import ManualEntryForm from "../cp2/ManualEntryForm";
import ManualChartEditor from "../cp2/manualchart/ManualChartEditor";
import { useState } from "react";

const CompleteProfile = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const currentStep = parseInt(searchParams.get("step")) || 1;
  const step2View = searchParams.get("view") || "choice";
  const totalSteps = 3;
  const [editorKey, setEditorKey] = useState(0);

  const goTo = (params) => {
    setSearchParams(params);
  };

  const handleStep1Submit = (data) => {
    console.log("Step 1 Data:", data);
    goTo({ step: "2", view: "choice" });
  };

  const handleStep2ChoiceSubmit = (selection) => {
    console.log("Step 2 Choice:", selection);
    if (selection.inputMethod === "manual") {
      goTo({ step: "2", view: "manualform" });
    } else if (selection.inputMethod === "generate") {
      goTo({ step: "2", view: "generate" });
    }
  };

  const handleGenerateFormSubmit = (data) => {
    console.log("Generate Chart Data:", data);
    goTo({ step: "2", view: "showChart" });
  };

  const handleChartConfirm = () => {
    console.log("Chart Confirmed");
    goTo({ step: "3" });
  };

  const handleChartEdit = () => {
    console.log("Editing Chart Details");
    setEditorKey((prevKey) => prevKey + 1);
  };

  const handleManualEntryFormSubmit = (data) => {
    console.log("Manual entry form data", data);
    goTo({ step: "2", view: "numberedChart" });
  };

  const handleStep3Submit = (data) => {
    console.log("Final Profile Data:", data);
  };

  const renderStepHeader = () => {
    switch (currentStep) {
      case 1:
        return (
          <div>
            <p className="text-middleGray font-medium">Enter the details</p>
            <p className="font-bold text-darkRed text-lg">
              to complete your profile
            </p>
          </div>
        );
      case 2:
        if (step2View === "generate") {
          return (
            <div>
              <p className="text-middleGray font-medium">Enter birth details</p>
              <p className="font-bold text-darkRed text-lg">
                to calculate Astrology chart
              </p>
            </div>
          );
        } else if (step2View === "showChart") {
          return (
            <div>
              <p className="font-bold text-darkRed">
                This is your Rasi, Navamsa chart
              </p>
              <p className="text-sm text-middleGray">
                If any changes, you can edit. Otherwise confirm it.
              </p>
            </div>
          );
        } else if (
          step2View === "manualform" ||
          step2View === "numberedChart"
        ) {
          return (
            <div>
              <p className="text-middleGray font-medium">Enter birth details</p>
              <p className="font-bold text-darkRed text-lg">
                to calculate Astrology chart
              </p>
            </div>
          );
        } else {
          return (
            <div>
              <p className="text-middleGray font-medium">Choose preferred</p>
              <p className="font-bold text-darkRed text-lg">
                Astrology chart input method
              </p>
              <p className="text-middleGray text-sm">
                You can generate astrology chart with required birth details or
                you can enter manually
              </p>
            </div>
          );
        }
      case 3:
        return (
          <div>
            <p className="text-middleGray">Enter the personal details</p>
            <p className="font-bold text-darkRed text-lg">
              to complete your profile
            </p>
          </div>
        );
      default:
        return null;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return <Step1Form onSubmit={handleStep1Submit} />;
      case 2:
        switch (step2View) {
          case "generate":
            return <GenerateChartForm onSubmit={handleGenerateFormSubmit} />;
          case "showChart":
            return (
              <AutoGeneratedChart
                onConfirm={handleChartConfirm}
                onEdit={() => goTo({ step: "2", view: "generate" })}
              />
            );
          case "manualform":
            return <ManualEntryForm onSubmit={handleManualEntryFormSubmit} />;
          case "numberedChart":
            return (
              <ManualChartEditor
                key={editorKey}
                title="Rasi"
                onConfirm={handleChartConfirm}
                onEdit={handleChartEdit}
              />
            );
          case "choice":
          default:
            return <Step2Form onSubmit={handleStep2ChoiceSubmit} />;
        }
      case 3:
        return <Step3Form onSubmit={handleStep3Submit} />;
      default:
        return <Step1Form onSubmit={handleStep1Submit} />;
    }
  };

  const handleLogout = () => {
    console.log("User logged out!");
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <div className="flex-grow">
        <div>
          <div className="flex justify-end px-4 pt-1 pb-0">
            <Profile
              imgSrc={user.imgSrc}
              userName={user.userName}
              onLogout={handleLogout}
            />
          </div>
          <Header />
        </div>
        <div className="px-6">
          <div className="pt-14 pb-8 text-center">{renderStepHeader()}</div>
          <div className="w-full mb-6">
            <Stepper currentStep={currentStep} totalSteps={totalSteps} />
          </div>
          <div>{renderStepContent()}</div>
        </div>
      </div>
      <footer className="py-2 px-10">
        <FooterText align="justify" className="md:text-center" />
      </footer>
    </div>
  );
};

export default CompleteProfile;
